import re

from calamari_ocr.ocr.text_processing import TextProcessor, TextProcessorParams


def default_groups():
    return {
        "quotes": False,
        "spaces": False,
        "roman_digits": False,
        "ligatures": False,
        "various": False,
    }


def parse_groups(string_list):
    groups = default_groups()

    for s in map(str.lower, string_list):
        if s == "none":
            groups["quotes"] = False
            groups["spaces"] = False
            groups["roman_digis"] = False
            groups["ligatures"] = False
            groups["various"] = False
        elif s == "simple":
            groups["quotes"] = False
            groups["spaces"] = True
            groups["roman_digis"] = False
            groups["ligatures"] = False
            groups["various"] = True
        elif s == "extended":
            groups["quotes"] = True
            groups["spaces"] = True
            groups["roman_digis"] = True
            groups["ligatures"] = False
            groups["various"] = True
        elif s == "all":
            groups["quotes"] = True
            groups["spaces"] = True
            groups["roman_digis"] = True
            groups["ligatures"] = True
            groups["various"] = True
        elif s in groups:
            groups[s] = True
        else:
            raise KeyError("Unknown key '{}', allowed: {}".format(s, groups.keys()))

    return groups


def default_text_regularizer_params(params=TextProcessorParams(), groups=["simple"]):
    params.type = TextProcessorParams.TEXT_REGULARIZER

    groups = parse_groups(groups)

    def replacement(old, new, regex=False):
        r = params.replacements.add()
        r.old = old
        r.new = new
        r.regex = regex

    if groups["various"]:
        replacement("¬µ", "Œº")    # replace micro unit with greek character
        replacement("‚Äì‚Äî‚Äî", "-")  # variant length hyphens
        replacement("‚Äì‚Äî", "-")   # variant length hyphens

    if groups["quotes"]:
        replacement('"', "''")   # typewriter double quote
        replacement("`", "'")    # grave accent
        replacement('‚Äú', "''")   # fancy quotes
        replacement('‚Äù', "''")   # fancy quotes
        replacement("¬¥", "'")    # acute accent
        replacement("‚Äò", "'")    # single quotation mark
        replacement("‚Äô", "'")    # single quotation mark
        replacement("‚Äú", "''")   # double quotation mark
        replacement("‚Äù", "''")   # double quotation mark
        replacement("‚Äú", "''")   # German quotes
        replacement("‚Äû", ",,")   # German quotes
        replacement("‚Ä¶", "...")  # ellipsis
        replacement("‚Ä≤", "'")    # prime
        replacement("‚Ä≥", "''")   # double prime
        replacement("‚Ä¥", "'''")  # triple prime
        replacement("„ÄÉ", "''")  # ditto mark

    if groups["ligatures"]:
        # compare https://en.wikipedia.org/wiki/Typographic_ligature#Ligatures_in_Unicode_(Latin_alphabets)
        replacement("Íú≤", "AA")
        replacement("Íú≥", "aa")
        replacement("√Ü", "AE")
        replacement("√¶", "ae")
        replacement("Íú¥", "AO")
        replacement("Íúµ", "ao")
        replacement("Íú∂", "AU")
        replacement("Íú∑", "au")
        replacement("Íú∏", "AV")
        replacement("Íúπ", "av")
        replacement("Íú∫", "AV")
        replacement("Íúª", "av")
        replacement("Íúº", "AY")
        replacement("ÍúΩ", "ay")
        replacement("üô∞", "et")
        replacement("Ô¨Ä", "ff")
        replacement("Ô¨É", "ffi")
        replacement("Ô¨Ñ", "ffl")
        replacement("Ô¨Ç", "fl")
        replacement("Ô¨Å", "fi")
        replacement("≈í", "OE")
        replacement("≈ì", "oe")
        replacement("Íùé", "OO")
        replacement("Íùè", "oo")
        replacement("·∫û", "fs")
        replacement("√ü", "fz")
        replacement("Ô¨Ü", "st")
        replacement("Ô¨Ö", "ft")
        replacement("Íú®", "TZ")
        replacement("Íú©", "tz")
        replacement("·µ´", "ue")
        replacement("Íù†", "VY")
        replacement("Íù°", "vy")

    if groups["roman_digits"]:
        replacement("‚Ö†", "I")     # expand unicode roman digits
        replacement("‚Ö°", "II")   # expand unicode roman digits
        replacement("‚Ö¢", "III")   # expand unicode roman digits
        replacement("‚Ö£", "IV")   # expand unicode roman digits
        replacement("‚Ö§", "V")   # expand unicode roman digits
        replacement("‚Ö•", "VI")   # expand unicode roman digits
        replacement("‚Ö¶", "VII")   # expand unicode roman digits
        replacement("‚Öß", "VIII")   # expand unicode roman digits
        replacement("‚Ö®", "IX")   # expand unicode roman digits
        replacement("‚Ö©", "X")   # expand unicode roman digits
        replacement("‚Ö™", "XI")   # expand unicode roman digits
        replacement("‚Ö´", "XII")   # expand unicode roman digits
        replacement("‚Ö¨", "L")   # expand unicode roman digits
        replacement("‚Ö≠", "C")   # expand unicode roman digits
        replacement("‚ÖÆ", "D")   # expand unicode roman digits
        replacement("‚ÖØ", "M")   # expand unicode roman digits
        replacement("‚Ö∞", "i")     # expand unicode roman digits
        replacement("‚Ö±", "ii")   # expand unicode roman digits
        replacement("‚Ö≤", "iii")   # expand unicode roman digits
        replacement("‚Ö≥", "iv")   # expand unicode roman digits
        replacement("‚Ö¥", "v")   # expand unicode roman digits
        replacement("‚Öµ", "vi")   # expand unicode roman digits
        replacement("‚Ö∂", "vii")   # expand unicode roman digits
        replacement("‚Ö∑", "viii")   # expand unicode roman digits
        replacement("‚Ö∏", "ix")   # expand unicode roman digits
        replacement("‚Öπ", "x")   # expand unicode roman digits
        replacement("‚Ö∫", "xi")   # expand unicode roman digits
        replacement("‚Öª", "xii")   # expand unicode roman digits
        replacement("‚Öº", "l")   # expand unicode roman digits
        replacement("‚ÖΩ", "c")   # expand unicode roman digits
        replacement("‚Öæ", "d")   # expand unicode roman digits
        replacement("‚Öø", "m")   # expand unicode roman digits

    if groups["spaces"]:
        replacement(r"\s+(?u)", ' ', True)   # Multiple spaces to one
        replacement(r"\n(?u)", '', True)     # Remove line breaks
        replacement(r"^\s+(?u)", '', True)   # strip left
        replacement(r"\s+$(?u)", '', True)   # strip right

    return params


class TextRegularizer(TextProcessor):
    def __init__(self, params=default_text_regularizer_params()):
        super().__init__()
        self.params = params

    def _apply_single(self, txt):
        for replacement in self.params.replacements:
            if replacement.regex:
                txt = re.sub(replacement.old, replacement.new, txt)
            else:
                txt = txt.replace(replacement.old, replacement.new)

        return txt


if __name__ == "__main__":
    n = TextRegularizer(default_text_regularizer_params(groups=["quotes", "spaces"]))
    assert(n.apply(["‚ÄúResolve quotes‚Äù"]) == ["''Resolve quotes''"])
    assert(n.apply(["  ‚ÄúResolve   spaces  ‚Äù   "]) == ["''Resolve spaces ''"])
